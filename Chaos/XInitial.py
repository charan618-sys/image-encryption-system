# importing all the functions from Key module
from Chaos.Key import *

# This module contains all the functions required to compute the value of X0
# The value of X01 and X02 will computed first using the functions x01 and x02
# Then we add the value of X01 and X02 and mod it with 1 to get the value of X0


# This function takes list of 10 binary keys and 3 key index to return X01 value after evaluation
# It converts the 3 given keys into a binary string B1 of 24 bits
# Using B1 we calculate the value of X01
def x01(binary_keys,i=3,j=4,k=5):
    B1 = binary_keys[i] + binary_keys[j] + binary_keys[k]
    x01 = 0
    for i in range(0,len(B1)):
        x01 = int(B1[i])*(2**(i)) + x01

    x01 = x01/(2**(24))
    return x01

# This function takes 20 hexadecimal keys and starting hexadecimal key index (value should be below 15) to compute X02
def x02(hex_keys, i=12):
    x02=0
    for i in range(i,i+6):
        x02 = int(hex_keys[i],16) + x02

    x02 = x02/(96)
    return x02


# This function mods the value generated by x01() and x02() function by 1

def x0(x01,x02):
    return (x01+x02)%1


##  Test code
######################################################################
## Ths is a test code to compute x0 using functions x01() and x02() and the Key module

#
# binary_keys = to_8bit_keys('ankit12345')
# hex_keys = to_hex_keys('ankit12345')
# for key in binary_keys:
#     print(key)
# x1=x01(binary_keys,3,4,5)
# print(x01(binary_keys,3,4,5))
#
#
# print(hex_keys)
# x2 = x02(hex_keys,12)
# print(x2)
#
# x0 = x0(x1, x2)
#
# print(x0)
